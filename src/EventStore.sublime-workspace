{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"event",
				"eventType	eventType"
			],
			[
				"even",
				"eventType	eventType"
			],
			[
				"Request",
				"RequestEntityTooLarge	int RequestEntityTooLarge"
			],
			[
				"Monitor",
				"MonitoringMessage	MonitoringMessage"
			],
			[
				"Monit",
				"MonitoringMessage	MonitoringMessage"
			],
			[
				"Delete",
				"DeletePersistentSubscription	DeletePersistentSubscription"
			],
			[
				"Dele",
				"DeletePersistentSubscription	DeletePersistentSubscription"
			],
			[
				"Create",
				"CreatePersistentSubscriptionCompleted	TcpCommand CreatePersistentSubscriptionCompleted"
			],
			[
				"Del",
				"DeletePersistentSubscriptionCompleted(	DeletePersistentSubscriptionCompleted(DeletePersistentSubscriptionResult result)"
			],
			[
				"Crea",
				"CreatePersistentSubscription	CreatePersistentSubscription"
			],
			[
				"PErs",
				"PersistentSubscriptionOperation	PersistentSubscriptionOperation"
			],
			[
				"Persis",
				"PersistentSubscriptionCreateResult	PersistentSubscriptionCreateResult"
			],
			[
				"_",
				"_groupName	string _groupName"
			],
			[
				"Inva",
				"InvalidOperationException	InvalidOperationException"
			],
			[
				"Persi",
				"CreatePersistentSubscription"
			],
			[
				"Creat",
				"PersistentSubscriptionCreateResult	PersistentSubscriptionCreateResult"
			],
			[
				"PErsis",
				"PersistentSubscriptionCreateResult	PersistentSubscriptionCreateResult"
			],
			[
				"Inve",
				"InventoryItemDeactivated_v2"
			],
			[
				"Inven",
				"InventoryItemDeactivated"
			],
			[
				"Invent",
				"InventoryItemDeactivated_v2"
			],
			[
				"I",
				"InventoryItemCurrentCounts"
			],
			[
				"Deac",
				"Deactivate"
			],
			[
				"srt",
				"startswith"
			],
			[
				"print",
				"printfn"
			],
			[
				"Degre",
				"DegreesF"
			],
			[
				"Degrees",
				"DegreesF"
			],
			[
				"con",
				"convertTemp"
			],
			[
				"De",
				"DegreesC"
			],
			[
				"Der",
				"DegreesF"
			],
			[
				"Event",
				"EventStoreConnection"
			],
			[
				"St",
				"StartY	int StartY"
			],
			[
				"Prin",
				"PrintGrid(	void PrintGrid(int[][] grid)"
			],
			[
				"Reada",
				"ReadAllLines(	string[] ReadAllLines(string path)"
			],
			[
				"To",
				"ToString(	string ToString(IFormatProvider provider)"
			],
			[
				"Commi",
				"CommitPosition	long CommitPosition"
			],
			[
				"Posi",
				"LogPosition	LogPosition"
			],
			[
				"Comm",
				"CommitPosition"
			],
			[
				"Prepa",
				"PreparePosition	long PreparePosition"
			],
			[
				"Networ",
				"NetworkCredential(	NetworkCredential(string userName, string password)"
			],
			[
				"base",
				"baseuri	baseuri"
			],
			[
				"Start",
				"StartNew"
			],
			[
				"Get",
				"GetRequestResponse(	HttpWebResponse GetRequestResponse(HttpWebRequest request)"
			],
			[
				"Data",
				"DataContentType"
			],
			[
				"Met",
				"MetadataContentType	int MetadataContentType"
			],
			[
				"From",
				"FromMilliseconds(	TimeSpan FromMilliseconds(double value)"
			],
			[
				"Scav",
				"ScavengeResult"
			],
			[
				"Sc",
				"ScavengeDatabaseCompleted"
			],
			[
				"Sca",
				"ScavengeDatabaseCompleted	ScavengeDatabaseCompleted"
			],
			[
				"hasEv",
				"hasEventTypes	hasEventTypes"
			],
			[
				"_has",
				"_hasEventTypes	bool _hasEventTypes"
			],
			[
				"Has",
				"HasEventTypes	bool HasEventTypes"
			],
			[
				"_hasE",
				"_hasEventTypes"
			],
			[
				"httpW",
				"HttpWebResponse	HttpWebResponse"
			],
			[
				"Ba",
				"BadRequest	HttpStatusCode BadRequest"
			],
			[
				"G",
				"GetResponseStream()	Stream GetResponseStream()"
			],
			[
				"Cone",
				"ContentLength	long ContentLength"
			],
			[
				"Add",
				"Add(	void Add(string name, string value)"
			],
			[
				"Reu",
				"RequestMonitor"
			],
			[
				"percent",
				"percentile	percentile"
			],
			[
				"per",
				"PerformanceCounter	PerformanceCounter"
			],
			[
				"Tick",
				"TicksPerMillisecond	long TicksPerMillisecond"
			],
			[
				"El",
				"ElapsedTicks	long ElapsedTicks"
			],
			[
				"Concu",
				"ConcurrentQueue	ConcurrentQueue"
			],
			[
				"Try",
				"TryRemove(	bool TryRemove(Guid key, out Operation value)"
			],
			[
				"E",
				"ElapsedTicks	long ElapsedTicks"
			],
			[
				"Stop",
				"Stopwatch	Stopwatch"
			],
			[
				"Concurr",
				"ConcurrentDictionary<	ConcurrentDictionary()"
			],
			[
				"include",
				"includedType	includedType"
			],
			[
				"includ",
				"includedType	includedType"
			],
			[
				"Even",
				"Event(	Event(Guid eventId, string eventType, bool isJson, byte[] data, byte[] metadata)"
			],
			[
				"As",
				"AsString"
			],
			[
				"Send",
				"SendBadRequest(	RequestParams SendBadRequest(HttpEntityManager httpEntityManager, string reason)"
			],
			[
				"S",
				"StatusCode	HttpStatusCode StatusCode"
			],
			[
				"Gossip",
				"GossipTimeout	GossipTimeout"
			],
			[
				"Gossi",
				"GossipInterval	TimeSpan GossipInterval"
			],
			[
				"gossip",
				"gossipAllowedTimeDifference	gossipAllowedTimeDifference"
			],
			[
				"Win",
				"Win32Exception"
			]
		]
	},
	"buffers":
	[
		{
			"file": "EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs",
			"settings":
			{
				"buffer_size": 10535,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.ClientAPI/Core/ClusterDnsEndPointDiscoverer.cs",
			"settings":
			{
				"buffer_size": 10257,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Services/Storage/StorageChaser.cs",
			"settings":
			{
				"buffer_size": 11124,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/TransactionLog/Chunks/TFChunkWriter.cs",
			"settings":
			{
				"buffer_size": 2797,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunk.cs",
			"settings":
			{
				"buffer_size": 39594,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/TransactionLog/Chunks/TFChunkChaser.cs",
			"settings":
			{
				"buffer_size": 1658,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/TransactionLog/Chunks/TFChunkReader.cs",
			"settings":
			{
				"buffer_size": 7517,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Services/Storage/StorageWriterService.cs",
			"settings":
			{
				"buffer_size": 34007,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/TransactionLog/LogRecords/LogRecord.cs",
			"settings":
			{
				"buffer_size": 6394,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs",
			"settings":
			{
				"buffer_size": 9984,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/TransactionLog/Chunks/TFChunk/ReaderWorkItem.cs",
			"settings":
			{
				"buffer_size": 439,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/TransactionLog/ITransactionFileReader.cs",
			"settings":
			{
				"buffer_size": 1504,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunkReadSide.cs",
			"settings":
			{
				"buffer_size": 22109,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Messages/MonitoringMessage.cs",
			"settings":
			{
				"buffer_size": 4197,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.ClientAPI/ClientOperations/CreatePersistentSubscriptionOperation.cs",
			"settings":
			{
				"buffer_size": 3339,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.ClientAPI/ClientOperations/DeletePersistentSubscriptionOperation.cs",
			"settings":
			{
				"buffer_size": 3347,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/ClusterVNode.cs",
			"settings":
			{
				"buffer_size": 31603,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Services/Transport/Tcp/ClientTcpDispatcher.cs",
			"settings":
			{
				"buffer_size": 33784,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Messages/ClientMessage.cs",
			"settings":
			{
				"buffer_size": 50058,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs",
			"settings":
			{
				"buffer_size": 43149,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Services/Transport/Http/Configure.cs",
			"settings":
			{
				"buffer_size": 19627,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Services/Transport/Http/Format.cs",
			"settings":
			{
				"buffer_size": 4447,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Services/Transport/Http/Convert.cs",
			"settings":
			{
				"buffer_size": 13725,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Data/Event.cs",
			"settings":
			{
				"buffer_size": 1167,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs",
			"settings":
			{
				"buffer_size": 3764,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs",
			"settings":
			{
				"buffer_size": 19315,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.BufferManagement/BufferManager.cs",
			"settings":
			{
				"buffer_size": 10629,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"statu",
				"Git: Status"
			],
			[
				"git",
				"Git: Blame"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"log",
				"Git: Log All"
			],
			[
				"quick",
				"Git: Quick Commit"
			],
			[
				"commit",
				"Git: Quick Commit"
			],
			[
				"git comi",
				"Git: Commit"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git commit ",
				"Git: Commit"
			],
			[
				"git hist",
				"GitHub: History"
			],
			[
				"history",
				"GitHub: History"
			],
			[
				"status",
				"Git: Status"
			],
			[
				"comm",
				"Git: Quick Commit"
			],
			[
				"commi",
				"Git: Commit"
			],
			[
				"C#",
				"Set Syntax: C#"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/greg/src/competing/src/EventStore.Core/Services/Transport/Http/Controllers/CommunicationController.cs",
		"/home/greg/src/competing/src/EventStore.BufferManagement/BufferPool.cs",
		"/home/greg/src/competing/src/EventStore.BufferManagement/BufferManager.cs",
		"/home/greg/src/competing/src/EventStore.BufferManagement/.BufferPoolStream.cs.swp",
		"/home/greg/src/competing/src/EventStore.BufferManagement/BufferPoolStream.cs",
		"/home/greg/src/competing/src/EventStore/esquery/esquery.csproj",
		"/home/greg/src/competing/src/app.config",
		"/home/greg/src/competing/src/Style.DotSettings",
		"/home/greg/src/competing/src/ReformatOptions.DotSettings",
		"/home/greg/src/competing/src/NLog.config",
		"/home/greg/src/competing/src/EventStore.sublime-project",
		"/home/greg/src/competing/src/EventStore.sln",
		"/home/greg/src/competing/src/EventStore.Core/Services/VNode/ClusterVNodeController.cs",
		"/home/greg/src/competing/src/EventStore.Core.Tests/Helpers/ClientApiLoggerBridge.cs",
		"/home/greg/src/competing/src/EventStore.Common/Concurrent/ConcurrentQueue.cs",
		"/home/greg/src/competing/src/EventStore.Projections.Core/Services/Processing/ResolvedEvent.cs",
		"/home/greg/src/competing/src/EventStore.Core/Messages/TcpClientMessageDtoExtensions.cs",
		"/home/greg/src/competing/src/EventStore.Core/Messages/TcpClientMessageDto.cs",
		"/home/greg/src/competing/src/EventStore.Core/Data/ResolvedEvent.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/Messages/ClientMessage.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/ResolvedEvent.cs",
		"/home/greg/src/competing/src/EventStore.Transport.Http/Atom/Feed.cs",
		"/home/greg/src/competing/src/EventStore.Transport.Http/EntityManagement/HttpEntityManager.cs",
		"/home/greg/src/competing/src/EventStore.Core.Tests/ClientAPI/Helpers/TestConnection.cs",
		"/home/greg/src/competing/src/EventStore.Core/Services/Transport/Http/Format.cs",
		"/home/greg/src/competing/src/EventStore.Core.Tests/ClientAPI/append_to_stream.cs",
		"/home/greg/src/competing/src/EventStore.ClusterNode.Web/clusternode-web/es/lib/jquery/jquery-1.8.0.js",
		"/home/greg/src/competing/src/esquery/esquery.csproj",
		"/home/greg/src/competing/src/EventStore.ClientAPI/EventStoreNodeConnection.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Checkpoint/MemoryMappedFileCheckpoint.cs",
		"/home/greg/src/competing/src/EventStore.Core/Bus/InMemoryBus.cs",
		"/home/greg/src/competing/src/EventStore.Core/Cluster/MemberInfo.cs",
		"/home/greg/src/competing/src/EventStore.Transport.Http/Codecs/ManualEncoding.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/Core/Messages.cs",
		"/home/greg/src/competing/src/EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/ClientOperations/CommitTransactionOperation.cs",
		"/home/greg/src/competing/src/EventStore.Transport.Http/EntityManagement/HttpEntityManagerExtensions.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/Transport.Tcp/TcpConnectionMonitor.cs",
		"/home/greg/src/competing/src/EventStore.Common/PowerArgs/HelperTypesInternal/ITabCompletionSourceWithContext.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/Transport.Tcp/IMonitoredTcpConnection.cs",
		"/home/greg/src/competing/src/EventStore.Core.Tests/TransactionLog/Truncation/when_truncating_into_the_middle_of_completed_chunk.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/ClientOperations/AppendToStreamOperation.cs",
		"/home/greg/src/competing/src/EventStore.ClusterNode.Web/clusternode-web/js/projections/lib/ace/theme-chrome.js",
		"/home/greg/src/competing/src/EventStore.Core.Tests/Services/Replication/TransactionCommit/when_transaction_commit_gets_already_committed.cs",
		"/home/greg/src/competing/src/EventStore.Core.Tests/Services/Replication/TransactionCommit/when_transaction_commit_gets_commit_timeout_before_final_commit.cs",
		"/home/greg/src/competing/src/EventStore.Common/PowerArgs/HelperTypesInternal/AttrOverride.cs",
		"/home/greg/src/competing/src/EventStore.Projections.Core.Tests/Services/emitted_stream/when_handling_an_emit_the_started_in_recovery_stream.cs",
		"/home/greg/src/competing/src/EventStore.Transport.Tcp/TcpConnection.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Chunks/TFConsts.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/SystemData/TcpPackage.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs",
		"/home/greg/src/competing/src/Protos/ClientAPI/ClientMessageDtos.proto",
		"/home/greg/src/competing/src/EventStore.ClientAPI/EventStore.ClientAPI.csproj",
		"/home/greg/src/competing/src/EventStore.ClientAPI/obj/Release/EventStore.ClientAPI.dll.mdb",
		"/home/greg/src/competing/src/EventStore.ClientAPI/obj/Release/EventStore.ClientAPI.csproj.FilesWrittenAbsolute.txt",
		"/home/greg/src/competing/src/EventStore.ClientAPI/ClientOperations/IClientOperation.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/Transport.Http/ClientOperationState.cs",
		"/home/greg/src/competing/src/EventStore.Transport.Http/Client/ClientOperationState.cs",
		"/home/greg/src/competing/src/EventStore.Core.Tests/ClientAPI/SystemData/clientapi_tcp_package.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/ProjectionsClient.cs",
		"/home/greg/src/competing/src/EventStore.Transport.Http/Client/HttpAsyncClient.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/Transport.Http/HttpAsyncClient.cs",
		"/home/greg/src/competing/src/EventStore.Core/Messages/HttpClientMessageDto.cs",
		"/home/greg/src/competing/src/EventStore.Core/Services/Transport/Tcp/ClientTcpDispatcher.cs",
		"/home/greg/src/competing/src/EventStore.Transport.Http/Client/IHttpClient.cs",
		"/home/greg/src/competing/src/EventStore.BufferManagement/UnableToCreateMemoryException.cs",
		"/home/greg/src/competing/src/EventStore.TestClient/CommandsProcessor.cs",
		"/home/greg/src/competing/src/EventStore.Transport.Tcp/TcpStats.cs",
		"/home/greg/src/competing/src/EventStore.Transport.Tcp/TcpServerListener.cs",
		"/home/greg/src/competing/src/EventStore.Core/Services/Transport/Tcp/TcpService.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunk.cs",
		"/home/greg/src/competing/src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs",
		"/home/greg/src/competing/src/EventStore.Core/Messages/ClientMessage.cs",
		"/home/greg/src/competing/src/EventStore.Core/Data/Event.cs",
		"/home/greg/src/competing/src/EventStore.Core/Helpers/IODispatcher.cs",
		"/home/greg/src/competing/src/EventStore.Core.Tests/TransactionLog/Truncation/when_truncating_database.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/ClientOperations/StartTransactionOperation.cs",
		"/home/greg/src/competing/src/EventStore.Common/Log/LogManager.cs",
		"/home/greg/src/competing/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingProjTranWriteScenario.cs",
		"/home/greg/src/competing/src/EventStore.Core.Tests/ClientAPI/read_all_events_forward_with_hard_deleted_stream_should.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Chunks/TFChunkChaser.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavenger.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Chunks/TFChunkReader.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Chunks/TFChunk/PosMap.cs",
		"/home/greg/src/competing/src/EventStore.Core.Tests/ClientAPI/Helpers/Writer.cs",
		"/home/greg/src/competing/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs",
		"/home/greg/src/competing/src/EventStore.TestClient/Commands/DvuBasic/DvuBasicProcessor.cs",
		"/home/greg/src/competing/src/EventStore.TestClient/Commands/RunTestScenarios/ScenarioBase.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Checkpoint/WriteThroughFileCheckpoint.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Checkpoint/InMemoryCheckpoint.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Checkpoint/ICheckpoint.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/Checkpoint/FileCheckpoint.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/ITransactionFileWriter.cs",
		"/home/greg/src/competing/src/EventStore.Common/Yaml/Serialization/TypeInspectors/ReadablePropertiesTypeInspector.cs",
		"/home/greg/src/competing/src/EventStore.Common/Yaml/Serialization/PropertyDescriptor.cs",
		"/home/greg/src/competing/src/EventStore.Common/Yaml/Serialization/IPropertyDescriptor.cs",
		"/home/greg/src/competing/src/EventStore.Common/Yaml/Core/Emitter.cs",
		"/home/greg/src/competing/src/EventStore.Common/Streams/UnbufferedFileReadStream.cs",
		"/home/greg/src/competing/src/EventStore.Common/PowerArgs/HelperTypesPublic/ConsoleString.cs",
		"/home/greg/src/competing/src/EventStore.Common/PowerArgs/HelperTypesInternal/StdConsoleProvider.cs",
		"/home/greg/src/competing/src/EventStore.Common/PowerArgs/HelperTypesInternal/MatrixMode.cs",
		"/home/greg/src/competing/src/EventStore.Common/PowerArgs/HelperTypesInternal/IConsoleProvider.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/EventStoreTransaction.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/LogRecords/LogRecord.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs",
		"/home/greg/src/competing/src/EventStore.Common/PowerArgs/HelperTypesInternal/FileSystemTabCompletionSource.cs",
		"/home/greg/src/competing/src/EventStore.Projections.Core.Tests/Services/event_filter/specific_stream_and_category_event_filter.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/ITransactionFileReader.cs",
		"/home/greg/src/competing/src/EventStore.Core/TransactionLog/ITransactionFileChaser.cs",
		"/home/greg/src/competing/src/EventStore.Core/Services/Storage/StorageReaderService.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/PersistentSubscriptionDeleteResult.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/PersistentSubscriptionCreateResult.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/PersistentSubscription.cs",
		"/home/greg/src/competing/src/EventStore.ClusterNode/Program.cs",
		"/home/greg/src/competing/src/EventStore.Core/Cluster/VNodeInfo.cs",
		"/home/greg/src/competing/src/EventStore.Core/Services/VNode/VNodeFSMBuilder.cs",
		"/home/greg/src/competing/src/libs/include/v8.h",
		"/home/greg/src/competing/src/EventStore.Core.Tests/Services/PersistentSubscription_should.cs",
		"/home/greg/src/competing/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscription.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/ClientOperations/PersistentSubscriptionOperation.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/PersistentSubscriptionDeleteStatus.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/IEventStoreConnection.cs",
		"/home/greg/src/competing/src/libs/.gitignore",
		"/home/greg/src/competing/src/EventStore.TestClient/Commands/TcpSanitazationCheckProcessor.cs",
		"/home/greg/src/competing/src/EventStore.Core.Tests/ClientAPI/Helpers/TcpType.cs",
		"/home/greg/src/competing/src/EventStore.Core/Services/TcpSendService.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/Transport.Tcp/TcpConnectionSsl.cs",
		"/home/greg/src/competing/src/EventStore.ClientAPI/Transport.Tcp/TcpConnectionLockless.cs"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Read",
			"Event ",
			"Event",
			"UnwrapPackage",
			"GetRawPosition",
			"persis",
			"OS ",
			"StorageMessage+RequestCompleted",
			"ElectionsService",
			"elect",
			"SLOW",
			"new",
			"moon",
			"Unhandled exception while starting application",
			"http",
			"Guid",
			"Register",
			"DefaultCodec",
			"http",
			"should_return_log_position_when_writing",
			"Delete",
			"DeleteStream",
			"Complete",
			"==",
			"_pending",
			"should_timeout_connection_after_conf",
			"should_timeout_connection_after_configured_amount_time_on",
			"should_timeout_connection_after_configured_amount_time_on_conenct",
			"should_timeout_connection_after_configured_amount_time_on_conenct\nshould_timeout_connection_after_configured_amount_time_on_conenct\nshould_timeout_connection_after_configured_amount_time_on_conenct\nshould_timeout_connection_after_configured_amount_time_on_conenct\nshould_timeout_connection_after_configured_amount_time_on_conenct",
			"(),",
			"();",
			"delete",
			"SubscribeToAll",
			"Connect()",
			"ConnectAsycnc",
			"nc().Wait()",
			".Connect();",
			"Create",
			"Result",
			".Wait",
			".Wait()",
			"()).",
			".Wait",
			".Result",
			"result",
			"await",
			"deleted_stream_events_are_indexed",
			"CreateDum",
			"CreateRawJsonPostRequest",
			"when_creating_a_secured_stream_by_posting_metadata",
			"CreateRawJsonPostRequest",
			"MakeJsonPost",
			"MakeJson",
			"CreateRawJsonPostRequest",
			"when_requesting_a_protected_resource_with_credentials_of_deleted_user_account",
			"MakeJson",
			"makejsonpost",
			"new EventRecord",
			" Event(",
			"Event(",
			"EventRe",
			"scave",
			"Scav",
			"EventRecord(",
			"EventRecord",
			"class ResolvedEvent",
			"xml",
			"raw_json",
			"when_posting_an",
			"CreateJsonPostRequest",
			"MakeJson",
			"CreateJsonPostRequest",
			"CreateJsonPostRe",
			"CreateJsonPostRequest",
			"MakeJsonPost",
			".WriteJson(",
			"ToJsonBytes()",
			"WriteJson",
			"MakeJsonPost",
			"CreateRequest",
			"CreateJsonPostRequest",
			"MakeJsonPost",
			"CreateRequest",
			"CreateJsonPostRequest",
			"MakeJsonPost",
			"CreateJsonPost",
			"CreateJsonPostRequest",
			"CreateJsonPost",
			"Makejson",
			"PermRedirect",
			"should_not_throw_exception_when_server_is_down",
			"should_close_connection_after_configured_amount_of_failed_reconnections",
			"xml",
			"GetIncluded",
			"SystemH",
			"GetIncludedId",
			"ToString",
			"JsonData",
			"Guid",
			"PostEnt",
			"Goss",
			"ISender",
			"IMessageSender",
			"httpP",
			"SendOverHttp",
			"SendGossip",
			"GotGossipSeedSources",
			"200",
			"gossip",
			"ProcessQueue",
			"ScavengeDatabase",
			"Scavenge",
			".Created",
			".Created "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"ConnectAsync().Wait()",
			"ConnectAsync",
			".ConnectAsycnc().Wait()"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 25,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10535,
						"regions":
						{
						},
						"selection":
						[
							[
								3050,
								3050
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 912.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "EventStore.ClientAPI/Core/ClusterDnsEndPointDiscoverer.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10257,
						"regions":
						{
						},
						"selection":
						[
							[
								2799,
								2799
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 893.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "EventStore.Core/Services/Storage/StorageChaser.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11124,
						"regions":
						{
						},
						"selection":
						[
							[
								4218,
								4218
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1691.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "EventStore.Core/TransactionLog/Chunks/TFChunkWriter.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2797,
						"regions":
						{
						},
						"selection":
						[
							[
								1440,
								1440
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunk.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39594,
						"regions":
						{
						},
						"selection":
						[
							[
								24488,
								24488
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11567.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "EventStore.Core/TransactionLog/Chunks/TFChunkChaser.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1658,
						"regions":
						{
						},
						"selection":
						[
							[
								409,
								409
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "EventStore.Core/TransactionLog/Chunks/TFChunkReader.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7517,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "EventStore.Core/Services/Storage/StorageWriterService.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34007,
						"regions":
						{
						},
						"selection":
						[
							[
								22541,
								22541
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8582.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "EventStore.Core/TransactionLog/LogRecords/LogRecord.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6394,
						"regions":
						{
						},
						"selection":
						[
							[
								2687,
								2687
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 855.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9984,
						"regions":
						{
						},
						"selection":
						[
							[
								855,
								855
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2565.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "EventStore.Core/TransactionLog/Chunks/TFChunk/ReaderWorkItem.cs",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 439,
						"regions":
						{
						},
						"selection":
						[
							[
								439,
								439
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "EventStore.Core/TransactionLog/ITransactionFileReader.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1504,
						"regions":
						{
						},
						"selection":
						[
							[
								52,
								52
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunkReadSide.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22109,
						"regions":
						{
						},
						"selection":
						[
							[
								2710,
								2710
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1147.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "EventStore.Core/Messages/MonitoringMessage.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4197,
						"regions":
						{
						},
						"selection":
						[
							[
								249,
								249
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "EventStore.ClientAPI/ClientOperations/CreatePersistentSubscriptionOperation.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3339,
						"regions":
						{
						},
						"selection":
						[
							[
								1391,
								1391
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 228.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "EventStore.ClientAPI/ClientOperations/DeletePersistentSubscriptionOperation.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3347,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "EventStore.Core/ClusterVNode.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31603,
						"regions":
						{
						},
						"selection":
						[
							[
								2815,
								2815
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1273.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "EventStore.Core/Services/Transport/Tcp/ClientTcpDispatcher.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33784,
						"regions":
						{
						},
						"selection":
						[
							[
								275,
								275
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 48.0,
						"translation.y": 1425.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "EventStore.Core/Messages/ClientMessage.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 50058,
						"regions":
						{
						},
						"selection":
						[
							[
								6042,
								6042
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2618.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43149,
						"regions":
						{
						},
						"selection":
						[
							[
								18352,
								18352
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5892.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "EventStore.Core/Services/Transport/Http/Configure.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19627,
						"regions":
						{
						},
						"selection":
						[
							[
								7299,
								7299
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2433.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "EventStore.Core/Services/Transport/Http/Format.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4447,
						"regions":
						{
						},
						"selection":
						[
							[
								1786,
								1786
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 343.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "EventStore.Core/Services/Transport/Http/Convert.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13725,
						"regions":
						{
						},
						"selection":
						[
							[
								8197,
								8197
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2225.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "EventStore.Core/Data/Event.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1167,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3764,
						"regions":
						{
						},
						"selection":
						[
							[
								3036,
								3036
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19315,
						"regions":
						{
						},
						"selection":
						[
							[
								14253,
								14253
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5783.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 26,
					"file": "EventStore.BufferManagement/BufferManager.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10629,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "EventStore.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"EventStore.BufferManagement/BufferManager.cs"
			],
			[
				"clustervnod",
				"EventStore.Core/ClusterVNode.cs"
			],
			[
				"atomcontroll",
				"EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs"
			],
			[
				"clientmess",
				"EventStore.Core/Messages/ClientMessage.cs"
			],
			[
				"memorymapp",
				"EventStore.Core/TransactionLog/Checkpoint/MemoryMappedFileCheckpoint.cs"
			],
			[
				"atomcon",
				"EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs"
			],
			[
				"communi",
				"EventStore.Core/Services/Transport/Http/Controllers/CommunicationController.cs"
			],
			[
				"atromcontroll",
				"EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs"
			],
			[
				"tcpdispatcher",
				"EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs"
			],
			[
				"tcpclientdisp",
				"EventStore.Core/Services/Transport/Tcp/ClientTcpDispatcher.cs"
			],
			[
				"tfchunkmanag",
				"EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs"
			],
			[
				"tcpclientdis",
				"EventStore.Core/Services/Transport/Tcp/ClientTcpDispatcher.cs"
			],
			[
				"storagewrit",
				"EventStore.Core/Services/Storage/StorageWriterService.cs"
			],
			[
				"tfconsts",
				"EventStore.Core/TransactionLog/Chunks/TFConsts.cs"
			],
			[
				"logrecord",
				"EventStore.Core/TransactionLog/LogRecords/LogRecord.cs"
			],
			[
				"storagewrite",
				"EventStore.Core/Services/Storage/StorageWriterService.cs"
			],
			[
				"tfchas",
				"EventStore.Core/TransactionLog/Chunks/TFChunkChaser.cs"
			],
			[
				"tfchun",
				"EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunk.cs"
			],
			[
				"tfchunkwrit",
				"EventStore.Core/TransactionLog/Chunks/TFChunkWriter.cs"
			],
			[
				"storagec",
				"EventStore.Core/Services/Storage/StorageChaser.cs"
			],
			[
				"clusterdnsendpo",
				"EventStore.ClientAPI/Core/ClusterDnsEndPointDiscoverer.cs"
			],
			[
				"persistentsubscriptionser",
				"EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs"
			],
			[
				"persistentsubscriptionserv",
				"EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs"
			],
			[
				"vnodecon",
				"EventStore.Core/Services/VNode/ClusterVNodeController.cs"
			],
			[
				"persistentsu",
				"EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs"
			],
			[
				"clustervnode",
				"EventStore.Core/ClusterVNode.cs"
			],
			[
				".proto",
				"Protos/ClientAPI/ClientMessageDtos.proto"
			],
			[
				"tcppack",
				"EventStore.ClientAPI/SystemData/TcpPackage.cs"
			],
			[
				"eventstorenode",
				"EventStore.ClientAPI/EventStoreNodeConnection.cs"
			],
			[
				"deletepe",
				"EventStore.ClientAPI/ClientOperations/DeletePersistentSubscriptionOperation.cs"
			],
			[
				"createo",
				"EventStore.ClientAPI/ClientOperations/CreatePersistentSubscriptionOperation.cs"
			],
			[
				"persisste",
				"EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs"
			],
			[
				"tcpcomm",
				"EventStore.Core/Services/Transport/Tcp/TcpCommand.cs"
			],
			[
				"eventstorecatch",
				"EventStore.ClientAPI/EventStoreCatchUpSubscription.cs"
			],
			[
				"tcpclientmessage",
				"EventStore.Core/Messages/TcpClientMessageDto.cs"
			],
			[
				"tcpcommand",
				"EventStore.Core/Services/Transport/Tcp/TcpCommand.cs"
			],
			[
				"esquery",
				"esquery/esquery.csproj"
			],
			[
				"eventstore.clie",
				"EventStore.ClientAPI/EventStore.ClientAPI.csproj"
			],
			[
				"persistentsubscription",
				"EventStore.ClientAPI/PersistentSubscriptionDeleteResult.cs"
			],
			[
				"persistents",
				"EventStore.ClientAPI/PersistentSubscriptionCreateResult.cs"
			],
			[
				"tcpcomman",
				"EventStore.ClientAPI/SystemData/TcpCommand.cs"
			],
			[
				"createper",
				"EventStore.ClientAPI/ClientOperations/CreatePersistentSubscriptionOperation.cs"
			],
			[
				"proto",
				"Protos/ClientAPI/ClientMessageDtos.proto"
			],
			[
				"write",
				"EventStore.ClientAPI/WriteResult.cs"
			],
			[
				"persisten",
				"EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs"
			],
			[
				"persistent",
				"EventStore.ClientAPI/PersistentSubscription.cs"
			],
			[
				"tfcon",
				"EventStore.Core/TransactionLog/Chunks/TFConsts.cs"
			],
			[
				"tfchunk",
				"EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunk.cs"
			],
			[
				"tfchunkwrite",
				"EventStore.Core/TransactionLog/Chunks/TFChunkWriter.cs"
			],
			[
				"atom",
				"EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs"
			],
			[
				"persis",
				"EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs"
			],
			[
				"resolvedeven",
				"EventStore.ClientAPI/ResolvedEvent.cs"
			],
			[
				"even",
				"SimpleCQRS/Events.cs"
			],
			[
				"domain",
				"SimpleCQRS/Domain.cs"
			],
			[
				"event",
				"SimpleCQRS/Events.cs"
			],
			[
				"ievents",
				"EventStore.ClientAPI/IEventStoreConnection.cs"
			],
			[
				"tcpconnectionloc",
				"EventStore.Transport.Tcp/TcpConnectionLockless.cs"
			],
			[
				"convert",
				"EventStore.Core/Services/Transport/Http/Convert.cs"
			],
			[
				"tfchu",
				"EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs"
			],
			[
				"tcpco",
				"EventStore.Transport.Tcp/TcpConnection.cs"
			],
			[
				"gossipco",
				"EventStore.Core/Services/Transport/Http/Controllers/GossipController.cs"
			],
			[
				"indexwrit",
				"EventStore.Core/Services/Storage/ReaderIndex/IndexWriter.cs"
			],
			[
				"index",
				"EventStore.Core/Services/Storage/ReaderIndex/IndexReader.cs"
			],
			[
				"trans",
				"EventStore.Core.Tests/ClientAPI/transaction.cs"
			],
			[
				"tfchunk.",
				"EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunk.cs"
			],
			[
				"gossipcon",
				"EventStore.Core/Services/Transport/Http/Controllers/GossipController.cs"
			],
			[
				"gossipserv",
				"EventStore.Core/Services/Gossip/GossipServiceBase.cs"
			],
			[
				"options",
				"EventStore.SingleNode/SingleNodeOptions.cs"
			],
			[
				"opts",
				"EventStore.Core/Util/Opts.cs"
			],
			[
				"program",
				"EventStore.TestClient/Program.cs"
			],
			[
				"feed",
				"EventStore.Transport.Http/Atom/Feed.cs"
			],
			[
				"atomcontrol",
				"EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs"
			],
			[
				"storageread",
				"EventStore.Core/Services/Storage/StorageReaderService.cs"
			],
			[
				"projectionscon",
				"EventStore.Projections.Core/Services/Http/ProjectionsController.cs"
			],
			[
				"when_tru",
				"EventStore.Core.Tests/TransactionLog/Truncation/when_truncating_database.cs"
			],
			[
				"soft_",
				"EventStore.Core.Tests/ClientAPI/soft_delete.cs"
			],
			[
				"single",
				"EventStore.Core/SingleVNode.cs"
			],
			[
				"atomcont",
				"EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs"
			],
			[
				"eventstoreno",
				"EventStore.ClientAPI/EventStoreNodeConnection.cs"
			],
			[
				"when_writ",
				"EventStore.Core.Tests/Services/Storage/CheckCommitStartingAt/when_writing_single_prepare.cs"
			],
			[
				"testfixturewithexistingevents",
				"EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs"
			],
			[
				"transactioncommi",
				"EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs"
			],
			[
				"clienttcp",
				"EventStore.Core/Services/Transport/Tcp/ClientTcpDispatcher.cs"
			],
			[
				"tcpclien",
				"EventStore.Core/Services/Transport/Tcp/ClientTcpDispatcher.cs"
			],
			[
				"committ",
				"EventStore.ClientAPI/ClientOperations/CommitTransactionOperation.cs"
			],
			[
				"commit",
				"EventStore.ClientAPI/ClientOperations/CommitTransactionOperation.cs"
			],
			[
				"append",
				"EventStore.ClientAPI/ClientOperations/AppendToStreamOperation.cs"
			],
			[
				"when_requesting_checkpoint_before_all_writes_completed",
				"EventStore.Projections.Core.Tests/Services/core_projection/projection_checkpoint/when_requesting_checkpoint_before_all_writes_completed.cs"
			],
			[
				"when_requesting_checkpoint_after_all_writes_completed.cs",
				"EventStore.Projections.Core.Tests/Services/core_projection/projection_checkpoint/when_requesting_checkpoint_after_all_writes_completed.cs"
			],
			[
				"when_emitting_events_in_correct_order_the_started_projection_checkpoint",
				"EventStore.Projections.Core.Tests/Services/core_projection/projection_checkpoint/when_emitting_events_in_correct_order_the_started_projection_checkpoint.cs"
			],
			[
				"when_checkpoint_requested_with_pending_writes",
				"EventStore.Projections.Core.Tests/Services/emitted_stream/when_checkpoint_requested_with_pending_writes.cs"
			],
			[
				"when_checkpoint_requested_with_all_writes_already_completed",
				"EventStore.Projections.Core.Tests/Services/emitted_stream/when_checkpoint_requested_with_all_writes_already_completed.cs"
			],
			[
				"/testfixturewithexistingevents",
				"EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs"
			],
			[
				"clientdisp",
				"EventStore.Core/Services/Transport/Tcp/ClientTcpDispatcher.cs"
			],
			[
				"clustervno",
				"EventStore.Core/Services/VNode/ClusterVNodeController.cs"
			],
			[
				"deletestre",
				"EventStore.Core/Services/RequestManager/Managers/DeleteStreamTwoPhaseRequestManager.cs"
			],
			[
				"writestre",
				"EventStore.Core/Services/RequestManager/Managers/WriteStreamTwoPhaseRequestManager.cs"
			],
			[
				"writestr",
				"EventStore.Core/Services/RequestManager/Managers/WriteStreamTwoPhaseRequestManager.cs"
			],
			[
				"clienttcpdis",
				"EventStore.Core/Services/Transport/Tcp/ClientTcpDispatcher.cs"
			],
			[
				"singleac",
				"EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs"
			],
			[
				"twophas",
				"EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs"
			],
			[
				"twopha",
				"EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs"
			],
			[
				"sing",
				"EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs"
			],
			[
				"singleack",
				"EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs"
			],
			[
				"requestmana",
				"EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs"
			],
			[
				"storagerea",
				"EventStore.Core/Services/Storage/StorageReaderService.cs"
			],
			[
				"userscon",
				"EventStore.Core/Services/Transport/Http/Controllers/UsersController.cs"
			],
			[
				"basic_authentication",
				"EventStore.Core.Tests/Http/BasicAuthentication/basic_authentication.cs"
			],
			[
				"httpmana",
				"EventStore.Transport.Http/EntityManagement/HttpEntityManager.cs"
			],
			[
				"authenticatedhttprequestprocessor",
				"EventStore.Core/Services/Transport/Http/AuthenticatedHttpRequestProcessor.cs"
			],
			[
				"clientap",
				"EventStore.Core.Tests/Helpers/ClientApiLoggerBridge.cs"
			],
			[
				"specification_with_standard_projections_runnning",
				"EventStore.Projections.Core.Tests/ClientAPI/specification_with_standard_projections_runnning.cs"
			],
			[
				"when_running_lo",
				"EventStore.Projections.Core.Tests/ClientAPI/when_handling_deleted/with_from_category_foreach_projection/recovery/when_running_long_parallel_query.cs"
			],
			[
				"specification_with",
				"EventStore.Projections.Core.Tests/ClientAPI/Cluster/specification_with_standard_projections_runnning.cs"
			],
			[
				"specification",
				"EventStore.Projections.Core.Tests/ClientAPI/specification_with_standard_projections_runnning.cs"
			],
			[
				"pro",
				"EventStore.ClusterNode/Program.cs"
			],
			[
				"progr",
				"EventStore.ClusterNode/Program.cs"
			],
			[
				"connect",
				"EventStore.Core.Tests/ClientAPI/connect.cs"
			],
			[
				"concur",
				"EventStore.Common/Concurrent/ConcurrentQueue.cs"
			],
			[
				"event_store_connection_should",
				"EventStore.Core.Tests/ClientAPI/event_store_connection_should.cs"
			],
			[
				"writefloodclientapiprocessor",
				"EventStore.TestClient/Commands/WriteFloodClientApiProcessor.cs"
			],
			[
				"with_standard_projections_running.cs",
				"EventStore.Projections.Core.Tests/ClientAPI/with_standard_projections_running.cs"
			],
			[
				"/scenariobase.cs",
				"EventStore.TestClient/Commands/RunTestScenarios/ScenarioBase.cs"
			],
			[
				"/subscriptionstresstestprocessor.cs",
				"EventStore.TestClient/Commands/SubscriptionStressTestProcessor.cs"
			],
			[
				"loopingprojtranwritescenario",
				"EventStore.TestClient/Commands/RunTestScenarios/LoopingProjTranWriteScenario.cs"
			],
			[
				"specification_with_standard_projections_runnning.cs",
				"EventStore.Projections.Core.Tests/ClientAPI/Cluster/specification_with_standard_projections_runnning.cs"
			],
			[
				"/with_standard_projections_running.cs",
				"EventStore.Projections.Core.Tests/ClientAPI/with_standard_projections_running.cs"
			],
			[
				"with_standard_projections_running",
				"EventStore.Projections.Core.Tests/ClientAPI/with_standard_projections_running.cs"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 279.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
